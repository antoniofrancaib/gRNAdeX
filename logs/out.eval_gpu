/home/jaf98/miniforge3/envs/rna/lib/python3.10/site-packages/Bio/Application/__init__.py:39: BiopythonDeprecationWarning: The Bio.Application modules and modules relying on it have been deprecated.

Due to the on going maintenance burden of keeping command line application
wrappers up to date, we have decided to deprecate and eventually remove these
modules.

We instead now recommend building your command line and invoking it directly
with the subprocess module.
  warnings.warn(
wandb: Currently logged in as: jaf98 (jaf98-university-of-cambridge) to https://api.wandb.ai. Use `wandb login --relogin` to force relogin
wandb: Using wandb-core as the SDK backend.  Please refer to https://wandb.me/wandb-core for more information.
wandb: Tracking run with wandb version 0.19.6
wandb: Run data is saved locally in /rds/user/jaf98/hpc-work/geometric-rna-design/wandb/wandb/run-20250223_140151-zyftgcc4
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run rna_eval_filt_baseline
wandb: ‚≠êÔ∏è View project at https://wandb.ai/jaf98-university-of-cambridge/gRNAde
wandb: üöÄ View run at https://wandb.ai/jaf98-university-of-cambridge/gRNAde/runs/zyftgcc4

CONFIG
    device: gpu
    gpu: 0
    seed: 0
    save: True
    data_path: /rds/user/jaf98/hpc-work/geometric-rna-design/data/
    radius: 4.5
    top_k: 32
    num_rbf: 32
    num_posenc: 32
    max_num_conformers: 1
    noise_scale: 0.1
    max_nodes_batch: 3000
    max_nodes_sample: 500
    split: das
    model: ARv1
    node_in_dim: [15, 4]
    node_h_dim: [128, 16]
    edge_in_dim: [131, 3]
    edge_h_dim: [64, 4]
    num_layers: 4
    drop_rate: 0.5
    out_dim: 4
    model_variant: Hybrid
    transformer_layers: 1
    transformer_heads: 4
    transformer_hidden_dim: 128
    transformer_dropout: 0.1
    epochs: 50
    lr: 0.0001
    label_smoothing: 0.05
    batch_size: 8
    num_workers: 8
    val_every: 5
    model_path: checkpoints/gRNAde_ARv1_1state_das.h5
    evaluate: True
    n_samples: 16
    temperature: 0.1
    beam_width: 5

MODEL
    AutoregressiveMultiGNNv1(
  (W_v): Sequential(
    (0): LayerNorm(
      (scalar_norm): LayerNorm((15,), eps=1e-05, elementwise_affine=True)
    )
    (1): GVP(
      (wh): Linear(in_features=4, out_features=16, bias=False)
      (ws): Linear(in_features=31, out_features=128, bias=True)
      (wv): Linear(in_features=16, out_features=16, bias=False)
      (wsv): Linear(in_features=128, out_features=16, bias=True)
    )
  )
  (W_e): Sequential(
    (0): LayerNorm(
      (scalar_norm): LayerNorm((131,), eps=1e-05, elementwise_affine=True)
    )
    (1): GVP(
      (wh): Linear(in_features=3, out_features=4, bias=False)
      (ws): Linear(in_features=135, out_features=64, bias=True)
      (wv): Linear(in_features=4, out_features=4, bias=False)
      (wsv): Linear(in_features=64, out_features=4, bias=True)
    )
  )
  (encoder_layers): ModuleList(
    (0-3): 4 x MultiGVPConvLayer(
      (conv): MultiGVPConv()
      (norm): ModuleList(
        (0-1): 2 x LayerNorm(
          (scalar_norm): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
        )
      )
      (dropout): ModuleList(
        (0-1): 2 x Dropout(
          (sdropout): Dropout(p=0.5, inplace=False)
          (vdropout): _VDropout()
        )
      )
      (ff_func): Sequential(
        (0): GVP(
          (wh): Linear(in_features=16, out_features=32, bias=False)
          (ws): Linear(in_features=160, out_features=512, bias=True)
          (wv): Linear(in_features=32, out_features=32, bias=False)
          (wsv): Linear(in_features=512, out_features=32, bias=True)
        )
        (1): GVP(
          (wh): Linear(in_features=32, out_features=32, bias=False)
          (ws): Linear(in_features=544, out_features=128, bias=True)
          (wv): Linear(in_features=32, out_features=16, bias=False)
          (wsv): Linear(in_features=128, out_features=16, bias=True)
        )
      )
    )
  )
  (W_s): Embedding(4, 4)
  (decoder_layers): ModuleList(
    (0-3): 4 x GVPConvLayer(
      (conv): GVPConv()
      (norm): ModuleList(
        (0-1): 2 x LayerNorm(
          (scalar_norm): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
        )
      )
      (dropout): ModuleList(
        (0-1): 2 x Dropout(
          (sdropout): Dropout(p=0.5, inplace=False)
          (vdropout): _VDropout()
        )
      )
      (ff_func): Sequential(
        (0): GVP(
          (wh): Linear(in_features=16, out_features=32, bias=False)
          (ws): Linear(in_features=160, out_features=512, bias=True)
          (wv): Linear(in_features=32, out_features=32, bias=False)
          (wsv): Linear(in_features=512, out_features=32, bias=True)
        )
        (1): GVP(
          (wh): Linear(in_features=32, out_features=32, bias=False)
          (ws): Linear(in_features=544, out_features=128, bias=True)
          (wv): Linear(in_features=32, out_features=16, bias=False)
          (wsv): Linear(in_features=128, out_features=16, bias=True)
        )
      )
    )
  )
  (W_out): GVP(
    (wh): Linear(in_features=16, out_features=16, bias=False)
    (ws): Linear(in_features=144, out_features=4, bias=True)
  )
)
    Total parameters: 2147944

TEST DATASET
    Pre-processing 98 samples
  0%|          | 0/98 [00:00<?, ?it/s]  1%|          | 1/98 [00:00<00:10,  9.63it/s]100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 98/98 [00:00<00:00, 703.79it/s]
    Finished: 98 pre-processed samples
Loading RibonanzaNet checkpoint: /rds/user/jaf98/hpc-work/geometric-rna-design/tools/ribonanzanet/ribonanzanet.pt
Loading RhoFold checkpoint: /rds/user/jaf98/hpc-work/geometric-rna-design/tools/rhofold/model_20221010_params.pt
  0%|          | 0/98 [00:00<?, ?it/s]  0%|          | 0/98 [00:10<?, ?it/s]
Traceback (most recent call last):
  File "/rds/user/jaf98/hpc-work/geometric-rna-design/main.py", line 259, in <module>
    main(config, device)
  File "/rds/user/jaf98/hpc-work/geometric-rna-design/main.py", line 54, in main
    results = evaluate(
  File "/rds/user/jaf98/hpc-work/geometric-rna-design/src/evaluator.py", line 165, in evaluate
    samples, logits = model.sample(data, n_samples, temperature, return_logits=True, beam_width=beam_width)
  File "/home/jaf98/miniforge3/envs/rna/lib/python3.10/site-packages/torch/utils/_contextlib.py", line 116, in decorate_context
    return func(*args, **kwargs)
  File "/rds/user/jaf98/hpc-work/geometric-rna-design/src/models.py", line 157, in sample
    h_V = (h_V[0].unsqueeze(0).repeat(n_samples, 1),
RuntimeError: Number of dimensions of repeat dims can not be smaller than number of dimensions of tensor
Traceback (most recent call last):
  File "/rds/user/jaf98/hpc-work/geometric-rna-design/main.py", line 259, in <module>
    main(config, device)
  File "/rds/user/jaf98/hpc-work/geometric-rna-design/main.py", line 54, in main
    results = evaluate(
  File "/rds/user/jaf98/hpc-work/geometric-rna-design/src/evaluator.py", line 165, in evaluate
    samples, logits = model.sample(data, n_samples, temperature, return_logits=True, beam_width=beam_width)
  File "/home/jaf98/miniforge3/envs/rna/lib/python3.10/site-packages/torch/utils/_contextlib.py", line 116, in decorate_context
    return func(*args, **kwargs)
  File "/rds/user/jaf98/hpc-work/geometric-rna-design/src/models.py", line 157, in sample
    h_V = (h_V[0].unsqueeze(0).repeat(n_samples, 1),
RuntimeError: Number of dimensions of repeat dims can not be smaller than number of dimensions of tensor
[1;34mwandb[0m: 
[1;34mwandb[0m: üöÄ View run [33mrna_eval_filt_baseline[0m at: [34mhttps://wandb.ai/jaf98-university-of-cambridge/gRNAde/runs/zyftgcc4[0m
[1;34mwandb[0m: Find logs at: [1;35mwandb/wandb/run-20250223_140151-zyftgcc4/logs[0m
